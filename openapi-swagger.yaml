openapi: 3.0.3
info:
  title: Bizkit Assessment
  version: 1.0.11
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: v1
    description: Bizkit Assessment.
  - name: v1/playground
    description: CRUD operations for practice. Using Data Files and Runtime Memory.
  - name: v2/playground
    description: CRUD operations for practice. Using Database.
paths:

  /match/{match_id}:
    get:
      tags:
        - v1
      summary: Compare 2 lists
      description: If all elements in list2 is in list1, then `Match found`, outherwise, `No match`.
      parameters:
        - name: match_id
          in: path
          description: index of the tuple that contains the 2 lists to compare
          required: true
          schema:
            type: integer
            format: int64
            example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponseV1'          
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid match id"

  /search:
    get:
      tags:
        - v1
      summary: Finds Users based on filters
      description: Find Users based on 4 optional filters - id, name, age, occupation. Will return a list that will match ANY of the filters. Will return the full list if there is no filter.
      parameters:
        - name: id
          in: query
          description: unique id
          required: false
          explode: false
          schema:
            type: string
            example: 5
        - name: name
          in: query
          description: partially matched and is case insensitive
          required: false
          explode: false
          schema:
            type: string
            example: "Joe"
        - name: age
          in: query
          description: range of age - 1 to age + 1
          required: false
          explode: false
          schema:
            type: integer
            example: 30
        - name: occupation
          in: query
          description: partially matched and is case insensitive
          required: false
          explode: false
          schema:
            type: string
            example: "Arc"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserV1"
                example:  [
                            {
                                "age": 31,
                                "id": "5",
                                "name": "Jane Smith",
                                "occupation": "Manager"
                            },
                            {
                                "age": 25,
                                "id": "3",
                                "name": "Joe Doe",
                                "occupation": "Designer"
                            },
                            {
                                "age": 24,
                                "id": "6",
                                "name": "Joe Smith",
                                "occupation": "Designer"
                            },
                            {
                                "age": 29,
                                "id": "1",
                                "name": "John Doe",
                                "occupation": "Developer"
                            },
                            {
                                "age": 30,
                                "id": "2",
                                "name": "Jane Doe",
                                "occupation": "Engineer"
                            },
                            {
                                "age": 28,
                                "id": "4",
                                "name": "John Smith",
                                "occupation": "Architect"
                            }
                        ]
                  
  /v2/search:
    get:
      tags:
        - v2/playground
      summary: Finds Users based on filters
      description: Find Users based on 4 optional filters - id, name, age, occupation. Will return a list that will match ANY of the filters. Will return the full list if there is no filter.
      parameters:
        - name: id
          in: query
          description: unique id
          required: false
          explode: false
          schema:
            type: string
            example: 5
        - name: name
          in: query
          description: partially matched and is case insensitive
          required: false
          explode: false
          schema:
            type: string
            example: "Joe"
        - name: age
          in: query
          description: range of age - 1 to age + 1
          required: false
          explode: false
          schema:
            type: integer
            example: 30
        - name: occupation
          in: query
          description: partially matched and is case insensitive
          required: false
          explode: false
          schema:
            type: string
            example: "Arc"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserV2"
                example:  [
                            {
                                "age": 31,
                                "id": 5,
                                "name": "Jane Smith",
                                "occupation": "Manager"
                            },
                            {
                                "age": 25,
                                "id": 3,
                                "name": "Joe Doe",
                                "occupation": "Designer"
                            },
                            {
                                "age": 29,
                                "id": 1,
                                "name": "John Doe",
                                "occupation": "Developer"
                            },
                            {
                                "age": 30,
                                "id": 2,
                                "name": "Jane Doe",
                                "occupation": "Engineer"
                            },
                            {
                                "age": 28,
                                "id": 4,
                                "name": "John Smith",
                                "occupation": "Architect"
                            }
                        ]

  /users:
    get:
      tags:
        - v1/playground
      summary: Retreives the full list of users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserV1"
                example: [
                  {
                      "age": 29,
                      "id": "1",
                      "name": "John Doe",
                      "occupation": "Developer"
                  },
                  {
                      "age": 30,
                      "id": "2",
                      "name": "Jane Doe",
                      "occupation": "Engineer"
                  },
                  {
                      "age": 25,
                      "id": "3",
                      "name": "Joe Doe",
                      "occupation": "Designer"
                  },
                  {
                      "age": 28,
                      "id": "4",
                      "name": "John Smith",
                      "occupation": "Architect"
                  },
                  {
                      "age": 31,
                      "id": "5",
                      "name": "Jane Smith",
                      "occupation": "Manager"
                  },
                  {
                      "age": 24,
                      "id": "6",
                      "name": "Joe Smith",
                      "occupation": "Designer"
                  }
                ]
  
    post:
      tags:
        - v1/playground
      summary: Adds a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserReq'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserResV1'
              example:  {
                  "data": {
                      "age": 27,
                      "id": "7",
                      "name": "Joe Doesnt",
                      "occupation": "Architect"
                  },
                  "message": "New User Added"
              }
        '500':
          description: Internal server error
          content:
            text/plain:
                schema:
                    type: string
                examples:
                  taken_name:
                    value: "Name already exists"
                  incomplete_json_req:
                    value: "Invalid JSON"
  /users/{id}:
    get:
      tags:
        - v1/playground
      summary: Retreive user data by id
      description: Retreives user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV1'          
              example:  {
                  "age": 25,
                  "id": "3",
                  "name": "Joe Doe",
                  "occupation": "Designer"
              }
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
    put:
      tags:
        - v1/playground
      summary: Update user data by id
      description: Updates user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReq'
            examples: 
              age_only:
                value: {
                  "age" : 40
                }
              name_only:
                value: {
                  "name" : "Meta Worldpeace"
                }
              occupation_only:
                value: {
                  "occupation" : "Professional Athlete"
                }
              age_and_name:
                value: {
                  "age" : 40,
                  "name" : "Meta Worldpeace"
                }
              age_and_occupation:
                value: {
                  "age" : 40,
                  "occupation" : "Professional Athlete"
                }
              name_and_occupation:
                value: {
                  "name" : "Meta Worldpeace",
                  "occupation" : "Professional Athlete"
                }
              all_three:
                value: {
                  "age" : 40,
                  "name" : "Meta Worldpeace",
                  "occupation" : "Professional Athlete"
                }

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResV1'   
              example: {
                "message": "Existing User Updated",
                "data": {
                  "old": {
                    "age": 25,
                    "id": "3",
                    "name": "Joe Doe",
                    "occupation": "Designer"
                  },
                  "updated": {
                    "age" : 40,
                    "id": "3",
                    "name" : "Meta Worldpeace",
                    "occupation" : "Professional Athlete"
                  }
                }
              }         
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
        '500':
          description: Internal Server Error
          content:
            text/plain:
                schema:
                  type: string
                  example: "Name already exists"
    delete:
      tags:
        - v1/playground
      summary: Delete user data by id
      description: Deletes user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 7
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResV1'
              example: {
                "message": "Existing User Deleted",
                "data": {
                  "id": "7",
                  "name": "Joshua Pedere",
                  "age": 26,
                  "occupation": "Programmer"
                }
              }          
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"

  /v2/users:
    get:
      tags:
        - v2/playground
      summary: Retreives the full list of users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserV2"
                example:  [
                            {
                                "age": 29,
                                "id": 1,
                                "name": "John Doe",
                                "occupation": "Developer"
                            },
                            {
                                "age": 30,
                                "id": 2,
                                "name": "Jane Doe",
                                "occupation": "Engineer"
                            },
                            {
                                "age": 25,
                                "id": 3,
                                "name": "Joe Doe",
                                "occupation": "Designer"
                            },
                            {
                                "age": 28,
                                "id": 4,
                                "name": "John Smith",
                                "occupation": "Architect"
                            },
                            {
                                "age": 31,
                                "id": 5,
                                "name": "Jane Smith",
                                "occupation": "Manager"
                            },
                            {
                                "age": 26,
                                "id": 11,
                                "name": "Rhuver Pedere",
                                "occupation": "Software Developer"
                            },
                            {
                                "age": 26,
                                "id": 12,
                                "name": "Joshua Pedere",
                                "occupation": "Software Developer"
                            },
                            {
                                "age": 26,
                                "id": 13,
                                "name": "RJ Pedere",
                                "occupation": "Software Developer"
                            }
                        ]
  
    post:
      tags:
        - v2/playground
      summary: Adds a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserReq'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserResV2'
              example: {
                "message": "New User Added",
                "data": {
                  "id": 7,
                  "name": "Joe Doesnt",
                  "age": 27,
                  "occupation": "Architect"
                }
              }
        '500':
          description: Internal server error
          content:
            text/plain:
                schema:
                    type: string
                examples:
                  taken_name:
                    value: "Name already exists"
                  incomplete_json_req:
                    value: "Invalid JSON"
  /v2/users/{id}:
    get:
      tags:
        - v2/playground
      summary: Retreive user data by id
      description: Retreives user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'          
              example:  {
                  "age": 25,
                  "id": 3,
                  "name": "Joe Doe",
                  "occupation": "Designer"
              }
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
    put:
      tags:
        - v2/playground
      summary: Update user data by id
      description: Updates user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReq'
            examples: 
              age_only:
                value: {
                  "age" : 40
                }
              name_only:
                value: {
                  "name" : "Meta Worldpeace"
                }
              occupation_only:
                value: {
                  "occupation" : "Professional Athlete"
                }
              age_and_name:
                value: {
                  "age" : 40,
                  "name" : "Meta Worldpeace"
                }
              age_and_occupation:
                value: {
                  "age" : 40,
                  "occupation" : "Professional Athlete"
                }
              name_and_occupation:
                value: {
                  "name" : "Meta Worldpeace",
                  "occupation" : "Professional Athlete"
                }
              all_three:
                value: {
                  "age" : 40,
                  "name" : "Meta Worldpeace",
                  "occupation" : "Professional Athlete"
                }

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResV2'   
              example: {
                "message": "Existing User Updated",
                "data": {
                  "old": {
                    "age": 25,
                    "id": 3,
                    "name": "Joe Doe",
                    "occupation": "Designer"
                  },
                  "updated": {
                    "age" : 40,
                    "id": 3,
                    "name" : "Meta Worldpeace",
                    "occupation" : "Professional Athlete"
                  }
                }
              }         
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
        '500':
          description: Internal Server Error
          content:
            text/plain:
                schema:
                  type: string
                  example: "Name already exists"
    delete:
      tags:
        - v2/playground
      summary: Delete user data by id
      description: Deletes user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 7
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResV2'
              example: {
                "message": "Existing User Deleted",
                "data": {
                  "id": 7,
                  "name": "Joshua Pedere",
                  "age": 26,
                  "occupation": "Programmer"
                }
              }          
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"

  /v2/interests/{id}:
    get:
      tags:
        - v2/playground
      summary: Retreive user's favorite numbers by id
      description: Retreives user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/FavNum"
                example:  [
                            {
                                "fav_num": 1,
                                "user_id": 1
                            },
                            {
                                "fav_num": 2,
                                "user_id": 1
                            },
                            {
                                "fav_num": 3,
                                "user_id": 1
                            },
                            {
                                "fav_num": 4,
                                "user_id": 1
                            },
                            {
                                "fav_num": 5,
                                "user_id": 1
                            },
                            {
                                "fav_num": 6,
                                "user_id": 1
                            },
                            {
                                "fav_num": 7,
                                "user_id": 1
                            },
                            {
                                "fav_num": 20,
                                "user_id": 1
                            },
                            {
                                "fav_num": 21,
                                "user_id": 1
                            }
                        ]

        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
    post:
      tags:
        - v2/playground
      summary: Adds user's favorite numbers by id
      description: Adds user data based on the path variable
      parameters:
        - name: id
          in: path
          description: unique id
          required: true
          schema:
            type: integer
            format: int64
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFavNumsReq'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewFavNumsRes'
                    
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id"
  /v2/interests/{id_1}/match/{id_2}:
    get:
      tags:
        - v2/playground
      summary: Compare FavNums of 2 users
      description: If all FavNums of id_2 is in the FavNums of id_1, then `Match found`, outherwise, `No match`.
      parameters:
        - name: id_1
          in: path
          description: user 1
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: id_2
          in: path
          description: user 2
          required: true
          schema:
            type: integer
            format: int64
            example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponseV2'          
        '404':
          description: Not found
          content:
            text/plain:
                schema:
                  type: string
                  example: "Invalid id/s"

components:
  schemas:
    MatchResponseV1:
      type: object
      properties:
        elapsedtime:
          type: number
          format: float
          example: 0.05674314498901367
        message:
          type: string
          example: "Match found"
    MatchResponseV2:
      type: object
      properties:
        elapsedtime:
          type: number
          format: float
          example: 0.05674314498901367
        message:
          type: string
          example: "Match found"
        fav_nums:
          type: object
          properties:
            user:
              type: array
              items:
                type: integer
                oneOf:
                  - example: 123
                  - example: 222
                  - example: 54
                  - example: 98
                  - example: 15
                  - example: 3000
                  - example: 1
                  - example: 0  
            other:
              type: array
              items:
                type: integer
                oneOf:
                  - example: 123
                  - example: 15
                  - example: 54
                  - example: 1
            
    UserV1:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        age:
          type: integer
          format: int64
        occupation:
          type: string
    UserV2:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int64
        occupation:
          type: string
    NewUserReq:
      type: object
      properties:
        name:
          type: string
          example: "Joe Doesnt"
        age:
          type: integer
          format: int64
          example: 27
        occupation:
          type: string
          example: "Architect"
      required:
        - name
        - age
        - occupation
    NewUserResV1:
      type: object
      properties:
        message:
          type: string
          example: "New User Added"
        data:
          $ref: '#/components/schemas/UserV1'
    NewUserResV2:
      type: object
      properties:
        message:
          type: string
          example: "New User Added"
        data:
          $ref: '#/components/schemas/UserV2'
    UpdateUserReq:
      type: object
      properties:
        name:
          type: string
          example: "Joe Doesnt"
        age:
          type: integer
          format: int64
          example: 27
        occupation:
          type: string
          example: "Architect"
    UpdateUserResV1:
      type: object
      properties:
        message:
          type: string
          example: "Existing User Updated"
        data:
          type: object
          properties:
            old:
              $ref: '#/components/schemas/UserV1'
            updated:
              $ref: '#/components/schemas/UserV1'
    UpdateUserResV2:
      type: object
      properties:
        message:
          type: string
          example: "Existing User Updated"
        data:
          type: object
          properties:
            old:
              $ref: '#/components/schemas/UserV2'
            updated:
              $ref: '#/components/schemas/UserV2'
    DeleteUserResV1:
      type: object
      properties:
        message:
          type: string
          example: "Existing User Deleted"
        data:
          $ref: '#/components/schemas/UserV1'
    DeleteUserResV2:
      type: object
      properties:
        message:
          type: string
          example: "Existing User Deleted"
        data:
          $ref: '#/components/schemas/UserV2'
    FavNum:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        fav_num:
          type: integer
          format: int64
    NewFavNumsReq:
      type: object
      properties:
        favnums:
          type: array
          items:
            type: integer
            oneOf:
              - example: 123
              - example: 222
              - example: 54
              - example: 98
              - example: 15
              - example: 15
              - example: 3000
              - example: 1
              - example: 0
    NewFavNumsRes:
      type: object
      properties:
        message:
          type: string
          example: "8 Favorite Numbers Added"
        data:
          type: array
          items:
            type: integer
            oneOf:
              - example: 123
              - example: 222
              - example: 54
              - example: 98
              - example: 15
              - example: 3000
              - example: 1
              - example: 0






